server {
    listen 80;
    listen [::]:80;

    server_name default;

    index index.php index.html index.htm;

    root /var/www/html;

    location ~ /.well-known/acme-challenge {
        allow all;
        root /var/www/html;
    }

    location / {
        try_files $uri $uri/ /index.php$is_args$args;
    }

    rewrite ^/core/authorize.php/core/authorize.php(.*)$ /core/authorize.php$1;

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }

    location ~ /\.ht {
        deny all;
    }

    location = /favicon.ico {
        log_not_found off; access_log off;
    }
    location = /robots.txt {
        log_not_found off; access_log off; allow all;
    }
    location ~* \.(css|gif|ico|jpeg|jpg|js|png)$ {
        expires max;
        log_not_found off;
    }
}
# include upstream.conf;

# server {
#     listen 80;
#     server_name default;
#     index index.php index.html index.htm;
#     root /var/www/html;

#     include preset.conf;
#     include defaults.conf;
# }

# server {
#     server_name localhost;
#     root /var/www/html/web; ## <-- Your only path reference.

#     listen 80;
#     listen [::]:80;
#     listen 443 default ssl;

#     # Redirect HTTP to HTTPS
#     # if ($scheme = http) {
#     #     return 301 https://$server_name$request_uri;
#     # }

#     location = /favicon.ico {
#         log_not_found off;
#         access_log off;
#     }

#     location = /robots.txt {
#         allow all;
#         log_not_found off;
#         access_log off;
#     }

#     # Very rarely should these ever be accessed outside of your lan
#     location ~* \.(txt|log)$ {
#         allow 192.168.0.0/16;
#         deny all;
#     }

#     location ~ \..*/.*\.php$ {
#         return 403;
#     }

#     location ~ ^/sites/.*/private/ {
#         return 403;
#     }

#     # Block access to "hidden" files and directories whose names begin with a
#     # period. This includes directories used by version control systems such
#     # as Subversion or Git to store control files.
#     location ~ (^|/)\. {
#         return 403;
#     }

#     location / {
#         # try_files $uri @rewrite; # For Drupal <= 6
#         try_files $uri /index.php?$query_string; # For Drupal >= 7
#     }

#     location @rewrite {
#         rewrite ^/(.*)$ /index.php?q=$1;
#     }

#     # In Drupal 8, we must also match new paths where the '.php' appears in the middle,
#     # such as update.php/selection. The rule we use is strict, and only allows this pattern
#     # with the update.php front controller.  This allows legacy path aliases in the form of
#     # blog/index.php/legacy-path to continue to route to Drupal nodes. If you do not have
#     # any paths like that, then you might prefer to use a laxer rule, such as:
#     #   location ~ \.php(/|$) {
#     # The laxer rule will continue to work if Drupal uses this new URL pattern with front
#     # controllers other than update.php in a future release.
#     location ~ '\.php$|^/update.php' {
#         fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
#         #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
#         include fastcgi_params;
#         include snippets/fastcgi-php.conf;
#         fastcgi_param SCRIPT_FILENAME $request_filename;
#         fastcgi_intercept_errors on;
#         fastcgi_pass unix:/run/php/php7.3-fpm.sock;
#     }

#     # Fighting with Styles? This little gem is amazing.
#     # location ~ ^/sites/.*/files/imagecache/ { # For Drupal <= 6
#     location ~ ^/sites/.*/files/styles/ { # For Drpal >= 7
#         try_files $uri @rewrite;
#     }

#     location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
#         expires max;
#         log_not_found off;
#     }
# }